CREATE OR REPLACE PACKAGE BODY trans_adm
IS
   PROCEDURE set_default_configs
   IS
   BEGIN
      -- set the notification events
      evolve_adm.set_notification_event
                                      ( 'audit_file',
                                        'file too large',
                                        'File outside size threshholds',
                                        'The file referenced below is larger than the configured threshhold:'
                                      );
      evolve_adm.set_notification_event
                                      ( 'audit_file',
                                        'file too small',
                                        'File outside size threshholds',
                                        'The file referenced below is smaller than the configured threshhold:'
                                      );
      -- load the entries into the ERROR_CONF table for Transcend
      evolve_adm.set_error_conf( p_name         => 'no_files_found',
                                 p_message      => 'No files found for this configuration'
                               );
      evolve_adm.set_error_conf( p_name         => 'no_ext_files',
                                 p_message      => 'There are no files found for this external table'
                               );
      evolve_adm.set_error_conf( p_name         => 'reject_limit_exceeded',
                                 p_message      => 'The external table reject limit was exceeded'
                               );
      evolve_adm.set_error_conf
                            ( p_name         => 'ext_file_missing',
                              p_message      => 'The physical file for the specified external table does not exist'
                            );
      evolve_adm.set_error_conf
         ( p_name         => 'on_clause_missing',
           p_message      => 'Either a unique constraint must exist on the target table, or a value for P_COLUMNS must be specified'
         );
      evolve_adm.set_error_conf
                           ( p_name         => 'incorrect_parameters',
                             p_message      => 'The combination of parameters provided yields no matching objects.'
                           );
      evolve_adm.set_error_conf( p_name         => 'file_too_big',
                                 p_message      => 'File size larger than MAX_BYTES paramter'
                               );
      evolve_adm.set_error_conf( p_name         => 'file_too_small',
                                 p_message      => 'File size smaller than MAX_BYTES paramter'
                               );
      evolve_adm.set_error_conf( p_name         => 'no_stats',
                                 p_message      => 'The specified segment has no stored statistics'
                               );
      evolve_adm.set_error_conf( p_name         => 'owb_flow_err',
                                 p_message      => 'An error was returned from the OWB Control Center'
                               );
      evolve_adm.set_error_conf
         ( p_name         => 'data_cartridge',
           p_message      => 'An unregistered data cartridge error was returned while selecting from the specified external table'
         );
      evolve_adm.set_error_conf
         ( p_name         => 'multi_loc_ext_tab',
           p_message      => 'External tables used in Transcend Files must contain a single location'
         );
      evolve_adm.set_error_conf
         ( p_name         => 'submit_sql',
           p_message      => 'An error was generated by a process submitted to the Oracle scheduler. See the scheduler logs for details.'
         );
   END set_default_configs;

   PROCEDURE configure_feed(
      p_file_label         VARCHAR2,
      p_file_group         VARCHAR2,
      p_file_description   VARCHAR2 DEFAULT NULL,
      p_object_owner       VARCHAR2 DEFAULT NULL,
      p_object_name        VARCHAR2 DEFAULT NULL,
      p_directory          VARCHAR2 DEFAULT NULL,
      p_arch_directory     VARCHAR2 DEFAULT NULL,
      p_min_bytes          NUMBER DEFAULT 0,
      p_max_bytes          NUMBER DEFAULT 0,
      p_file_datestamp     VARCHAR2 DEFAULT NULL,
      p_baseurl            VARCHAR2 DEFAULT NULL,
      p_passphrase         VARCHAR2 DEFAULT NULL,
      p_source_directory   VARCHAR2 DEFAULT NULL,
      p_source_regexp      VARCHAR2 DEFAULT NULL,
      p_regexp_options     VARCHAR2 DEFAULT 'i',
      p_source_policy      VARCHAR2 DEFAULT 'newest',
      p_required           VARCHAR2 DEFAULT 'yes',
      p_delete_source      VARCHAR2 DEFAULT 'yes',
      p_reject_limit       NUMBER   DEFAULT 100,
      p_mode               VARCHAR2 DEFAULT 'upsert'
   )
   IS
      l_dir_path   all_directories.directory_path%type;
      l_ext_tab	   all_external_tables.table_name%type;
      l_location   all_external_locations.location%type;
      e_dup_conf   EXCEPTION;
      PRAGMA EXCEPTION_INIT( e_dup_conf, -1 );
   BEGIN
      CASE
      -- these are the required parameters
      WHEN p_mode = 'insert' AND( p_object_owner IS NULL
				  OR p_object_name IS NULL
				  OR p_directory IS NULL
				  OR p_arch_directory IS NULL
				  OR p_source_directory IS NULL
				  OR p_source_regexp IS NULL )
         THEN
            raise_application_error( -20014, 'An insert requires a value for all required parameters' );
         ELSE
            NULL;
      END CASE;
      
      -- do checks to make sure all the provided information is legitimate
      
      IF NOT p_mode = 'delete'
      THEN
	 -- check to see if the directories are legitimate
	 -- if they aren't, the GET_DIR_PATH function raises an error
	 l_dir_path := td_utils.get_dir_path( p_directory );
	 l_dir_path := td_utils.get_dir_path( p_arch_directory );
	 l_dir_path := td_utils.get_dir_path( p_source_directory );
      
	 -- now check the external table
	 td_utils.check_table( p_owner     => p_object_owner,
			       p_table	   => p_object_name,
			       p_external  => 'yes' );
	 
	 -- get the filename from the external table
	 BEGIN

	    SELECT location
	      INTO l_location
	      from all_external_tables 
	      join all_external_locations 
		   using (owner,table_name)
	     WHERE owner=p_object_owner
	       AND table_name=p_object_name;
	    
	 EXCEPTION
	    WHEN too_many_rows
	    THEN 
	    evolve_log.raise_err( 'multi_loc_ext_tab' );
	 END;
	 
      END IF;

      -- this is the default method... update if it exists or insert it
      IF LOWER( p_mode ) IN( 'upsert', 'update' )
      THEN
         UPDATE files_conf
            SET file_description = NVL( p_file_description, file_description ),
		object_owner = NVL( p_object_owner, object_owner ),
		object_name = NVL( p_object_name, object_name ),
		DIRECTORY = NVL( p_directory, DIRECTORY ),
		filename = l_location,
		arch_directory = NVL( p_arch_directory, arch_directory ),
		min_bytes = NVL( p_min_bytes, min_bytes ),
		max_bytes = NVL( p_max_bytes, max_bytes ),
		file_datestamp = NVL( p_file_datestamp, file_datestamp ),
		baseurl = NVL( p_baseurl, baseurl ),
		passphrase = NVL( p_passphrase, passphrase ),
		source_directory = NVL( p_source_directory, source_directory ),
		source_regexp = NVL( p_source_regexp, source_regexp ),
		regexp_options = NVL( p_regexp_options, regexp_options ),
		source_policy = NVL( p_source_policy, source_policy ),
		required = NVL( p_required, required ),
		delete_source = NVL( p_delete_source, delete_source ),
		reject_limit = NVL( p_reject_limit, reject_limit ),
                modified_user = SYS_CONTEXT( 'USERENV', 'SESSION_USER' ),
                modified_dt = SYSDATE
          WHERE file_label = LOWER( p_file_label) AND file_group = lower( p_file_group );
      END IF;
      
      -- if the update was unsuccessful above, or an insert it specifically requested, then do an insert
      IF ( SQL%ROWCOUNT = 0 AND LOWER( p_mode ) = 'upsert' ) OR LOWER( p_mode ) = 'insert'
      THEN
         BEGIN
            INSERT INTO files_conf
                        (  file_label, 
                           file_group, 
                           file_type, 
                           file_description, 
                           object_owner, 
                           object_name, 
                           directory, 
                           filename, 
                           arch_directory, 
                           min_bytes, 
                           max_bytes, 
                           file_datestamp, 
                           baseurl, 
                           passphrase, 
                           source_directory, 
                           source_regexp, 
                           regexp_options, 
                           source_policy, 
                           required, 
                           delete_source, 
                           reject_limit )
                   VALUES ( p_file_label, 
                            p_file_group, 
                            'feed', 
                            p_file_description, 
                            p_object_owner, 
                            p_object_name, 
                            p_directory, 
                            l_location, 
                            p_arch_directory, 
                            p_min_bytes, 
                            p_max_bytes, 
                            p_file_datestamp, 
                            p_baseurl, 
                            p_passphrase, 
                            p_source_directory, 
                            p_source_regexp, 
                            p_regexp_options, 
                            p_source_policy, 
                            p_required, 
                            p_delete_source, 
                            p_reject_limit );
         EXCEPTION
            WHEN e_dup_conf
            THEN
               raise_application_error
                                 ( -20011,
                                   'An attempt was made to add a duplicate configuration'
                                 );
         END;
      END IF;

      
      -- if a delete is specifically requested, then do a delete
      IF LOWER( p_mode ) = 'delete'
      THEN
         DELETE FROM files_conf
          WHERE file_label = lower( p_file_label )
	    AND file_group = lower( p_file_group );
      END IF;

      -- if we still have not affected any records, then there's a problem
      IF SQL%ROWCOUNT = 0
      THEN
         raise_application_error( -20013,
                                  'This action affected no repository configurations'
                                );
      END IF;
   END configure_feed;

   PROCEDURE configure_extract(
      p_file_label         VARCHAR2,
      p_file_group         VARCHAR2,
      p_file_description   VARCHAR2 DEFAULT NULL,
      p_object_owner       VARCHAR2 DEFAULT NULL,
      p_object_name        VARCHAR2 DEFAULT NULL,
      p_directory          VARCHAR2 DEFAULT NULL,
      p_filename           VARCHAR2 DEFAULT NULL,
      p_arch_directory     VARCHAR2 DEFAULT NULL,
      p_min_bytes          NUMBER DEFAULT 0,
      p_max_bytes          NUMBER DEFAULT 0,
      p_file_datestamp     VARCHAR2 DEFAULT NULL,
      p_baseurl            VARCHAR2 DEFAULT NULL,
      p_dateformat         VARCHAR2 DEFAULT 'mm/dd/yyyy hh:mi:ss am',
      p_timestampformat    VARCHAR2 DEFAULT 'mm/dd/yyyy hh:mi:ss:x:ff am',
      p_delimiter          VARCHAR2 DEFAULT ',',
      p_quotechar          VARCHAR2 DEFAULT NULL,
      p_headers            VARCHAR2 DEFAULT 'yes',
      p_mode		   VARCHAR2 DEFAULT 'upsert'
   )
   IS
      e_dup_conf   EXCEPTION;
      PRAGMA EXCEPTION_INIT( e_dup_conf, -1 );
   BEGIN
      CASE
      -- these are the required parameters
      WHEN p_mode = 'insert' AND( p_object_owner IS NULL
				  OR p_object_name IS NULL
				  OR p_directory IS NULL
				  OR p_filename IS NULL
				  OR p_arch_directory IS NULL )
         THEN
            raise_application_error( -20014, 'An insert requires a value for all required parameters' );
         ELSE
            NULL;
      END CASE;

            

      -- this is the default method... update if it exists or insert it
      IF LOWER( p_mode ) IN( 'upsert', 'update' )
      THEN
         UPDATE files_conf
            SET file_description = NVL( p_file_description, file_description ),
		object_owner = NVL( p_object_owner, object_owner ),
		object_name = NVL( p_object_name, object_name ),
		DIRECTORY = NVL( p_directory, DIRECTORY ),
		filename = NVL( p_filename, filename ),
		arch_directory = NVL( p_arch_directory, arch_directory ),
		min_bytes = NVL( p_min_bytes, min_bytes ),
		max_bytes = NVL( p_max_bytes, max_bytes ),
		file_datestamp = NVL( p_file_datestamp, file_datestamp ),
		baseurl = NVL( p_baseurl, baseurl ),
		dateformat = NVL( p_dateformat, dateformat ),
		timestampformat = NVL( p_timestampformat, timestampformat ),
		delimiter = NVL( p_delimiter, delimiter ),
		quotechar = NVL( p_quotechar, quotechar ),
		headers = NVL( p_headers, headers ),
                modified_user = SYS_CONTEXT( 'USERENV', 'SESSION_USER' ),
                modified_dt = SYSDATE
          WHERE file_label = LOWER( p_file_label ) AND file_group = lower( p_file_group );
      END IF;
      
      -- if the update was unsuccessful above, or an insert it specifically requested, then do an insert
      IF ( SQL%ROWCOUNT = 0 AND LOWER( p_mode ) = 'upsert' ) OR LOWER( p_mode ) = 'insert'
      THEN
         BEGIN
            INSERT INTO files_conf
                        (  file_label, 
                           file_group, 
                           file_type, 
                           file_description, 
                           object_owner, 
                           object_name, 
                           directory, 
                           filename, 
                           arch_directory, 
                           min_bytes, 
                           max_bytes, 
                           file_datestamp, 
                           baseurl, 
                           dateformat, 
                           timestampformat, 
                           delimiter, 
                           quotechar, 
                           headers )
                   VALUES ( p_file_label, 
                            p_file_group, 
                            'extract', 
                            p_file_description, 
                            p_object_owner, 
                            p_object_name, 
                            p_directory, 
                            p_filename, 
                            p_arch_directory, 
                            p_min_bytes, 
                            p_max_bytes, 
                            p_file_datestamp, 
                            p_baseurl, 
                            p_dateformat, 
                            p_timestampformat, 
                            p_delimiter, 
                            p_quotechar, 
                            p_headers );
         EXCEPTION
            WHEN e_dup_conf
            THEN
               raise_application_error
                                 ( -20011,
                                   'An attempt was made to add a duplicate configuration'
                                 );
         END;
      END IF;

      
      -- if a delete is specifically requested, then do a delete
      IF LOWER( p_mode ) = 'delete'
      THEN
         DELETE FROM files_conf
          WHERE file_label = lower( p_file_label )
	    AND file_group = lower( p_file_group );
      END IF;

      -- if we still have not affected any records, then there's a problem
      IF SQL%ROWCOUNT = 0
      THEN
         raise_application_error( -20013,
                                  'This action affected no repository configurations'
                                );
      END IF;
   END configure_extract;
END trans_adm;
/

SHOW errors